
+~^~+ Ruby2Make +~^~+
=====================

* Goal: Ruby DSL to generate Makefiles

* Simple example: to make this Makefile,

    CC = gcc
    FLAGS = -g

    hello: hello.c
        $(CC) $(FLAGS) hello.c -o hello

    clean:
        -rm hello *.o

use this Ruby:

    vars :FLAGS => "-g"

    rule "hello", :depends => "hello.c" do
        compile :output => "hello"
    end

    clean "hello", "*.o"
 
It's more readable, and it doesn't insanely require tabs and not spaces.

-=- Usage -=-
-------------

* To install in /usr/bin, do `ruby setup.rb` as root.

* To use, `rbmake` looks for a Makefile.rb and generates a Makefile.

* To specify a Makefile.rb, use `rbmake other_file.rb`.

-=- Examples -=-
----------------

* Some examples are included, the fourth with an actual program as its
  Makefile.rb uses Dir.

-=- Syntax -=-
--------------

vars [hash] 
    => Set Makefile macros (includes {:CC => "gcc", :FLAGS => ""})

suffix [out extension] [in extension] [command]
    => Add a rule to compile files from the inextension to the out extension,
       currently using a literal compilation command. See example5.rb.

rule [name] [optional depends hash] [block] 
    => Add a rule/target called name. If a hash like ':depends => "hello.o"'
       or ':depends => ["hello.o", "hello.h"]' is present, then those items
       are added as dependencies to the rule.

depends [args]
    => Add dependencies to a rule (must occure in rule declaration's block)

compile [args]
    => Without any args, uses '$(CC) $(FLAGS)' to compile the dependencies.
       :input and :output specify specific files, and you can add a '-c' flag
       with :to_obj. Must occur in a rule block.

command [args]
    => Add a custom line/command to a rule.

echo [message]
    => Shortcut for an often used command: `command "@echo #{message}"`

clean [files]
    => Shortcut to create a clean rule, with a '-rm -rf' command for all file
       arguments given.

comment [comments]
    => When used outside a rule, adds the comment at the beginning of the 
       Makefile.  When used inside a rule, adds the comments directly above
       the rule (see example 1).
