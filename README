Ruby2Make
---------

* Goal: Ruby DSL to generate Makefiles

* Status: Pretty much a literal translation right now - though it does
          sort of work (see below example)

To make this Makefile:

    CC = gcc
    FLAGS = -g

    hello: hello.o
        $(CC) $(FLAGS) hello.o -o hello
        @echo "Run ./hello"

    hello.o: hello.c hello.h
        $(CC) $(FLAGS) hello.c -c

    clean:
        -rm hello *.o

Use this script:

    vars :CC => "gcc", :FLAGS => "-g"

    rule "hello", :depends => "hello.o" do
        compile :output => "hello"
        echo "Run ./hello"
    end

    rule "hello.o" do
        depend "hello.c", "hello.h"
        compile :to_obj
    end

    clean "hello", "*.o"
 
It's more readable, and it doesn't insanely require tabs and not spaces.

Syntax
------

vars [hash] => Set Makefile macros (includes "gcc" as :CC and "" as :FLAGS)

rule [name] [optional depends hash] [block] 
    => Add a rule/target called name. If a hash like ':depends => "hello.o"'
       or ':depends => ["hello.o", "hello.h"]' is present, then those items
       are added as dependencies to the rule.

depends [args]
    => Add dependencies to a rule (must occure in rule declaration's block)

compile [args]
    => Without any args, uses '$(CC) $(FLAGS)' to compile the dependencies.
       :input and :output specify specific files, and you can add a '-c' flag
       with :to_obj. Must occur in a rule block.

command [args]
    => Add a custom line to a rule.

echo [message]
    => Shortcut to add an '@echo' command.

clean [files]
    => Shortcut to create a clean rule, with a '-rm' command for any [files].
